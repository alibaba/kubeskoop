// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: libnettop.proto

package nettop

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Kernel struct {
	Release              string   `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Architecture         string   `protobuf:"bytes,3,opt,name=architecture,proto3" json:"architecture,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Kernel) Reset()         { *m = Kernel{} }
func (m *Kernel) String() string { return proto.CompactTextString(m) }
func (*Kernel) ProtoMessage()    {}
func (*Kernel) Descriptor() ([]byte, []int) {
	return fileDescriptor_8586caab84abc4f2, []int{0}
}
func (m *Kernel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Kernel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Kernel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Kernel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kernel.Merge(m, src)
}
func (m *Kernel) XXX_Size() int {
	return m.Size()
}
func (m *Kernel) XXX_DiscardUnknown() {
	xxx_messageInfo_Kernel.DiscardUnknown(m)
}

var xxx_messageInfo_Kernel proto.InternalMessageInfo

func (m *Kernel) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

func (m *Kernel) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Kernel) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

type CriMeta struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	RuntimeName          string   `protobuf:"bytes,2,opt,name=runtime_name,json=runtimeName,proto3" json:"runtime_name,omitempty"`
	RuntimeVersion       string   `protobuf:"bytes,3,opt,name=runtime_version,json=runtimeVersion,proto3" json:"runtime_version,omitempty"`
	RuntimeSock          string   `protobuf:"bytes,4,opt,name=runtime_sock,json=runtimeSock,proto3" json:"runtime_sock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CriMeta) Reset()         { *m = CriMeta{} }
func (m *CriMeta) String() string { return proto.CompactTextString(m) }
func (*CriMeta) ProtoMessage()    {}
func (*CriMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_8586caab84abc4f2, []int{1}
}
func (m *CriMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CriMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CriMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CriMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CriMeta.Merge(m, src)
}
func (m *CriMeta) XXX_Size() int {
	return m.Size()
}
func (m *CriMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_CriMeta.DiscardUnknown(m)
}

var xxx_messageInfo_CriMeta proto.InternalMessageInfo

func (m *CriMeta) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CriMeta) GetRuntimeName() string {
	if m != nil {
		return m.RuntimeName
	}
	return ""
}

func (m *CriMeta) GetRuntimeVersion() string {
	if m != nil {
		return m.RuntimeVersion
	}
	return ""
}

func (m *CriMeta) GetRuntimeSock() string {
	if m != nil {
		return m.RuntimeSock
	}
	return ""
}

type NodeMeta struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Kernel               *Kernel  `protobuf:"bytes,2,opt,name=kernel,proto3" json:"kernel,omitempty"`
	Crimeta              *CriMeta `protobuf:"bytes,3,opt,name=crimeta,proto3" json:"crimeta,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeMeta) Reset()         { *m = NodeMeta{} }
func (m *NodeMeta) String() string { return proto.CompactTextString(m) }
func (*NodeMeta) ProtoMessage()    {}
func (*NodeMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_8586caab84abc4f2, []int{2}
}
func (m *NodeMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMeta.Merge(m, src)
}
func (m *NodeMeta) XXX_Size() int {
	return m.Size()
}
func (m *NodeMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMeta.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMeta proto.InternalMessageInfo

func (m *NodeMeta) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeMeta) GetKernel() *Kernel {
	if m != nil {
		return m.Kernel
	}
	return nil
}

func (m *NodeMeta) GetCrimeta() *CriMeta {
	if m != nil {
		return m.Crimeta
	}
	return nil
}

func init() {
	proto.RegisterType((*Kernel)(nil), "nettop.Kernel")
	proto.RegisterType((*CriMeta)(nil), "nettop.CriMeta")
	proto.RegisterType((*NodeMeta)(nil), "nettop.NodeMeta")
}

func init() { proto.RegisterFile("libnettop.proto", fileDescriptor_8586caab84abc4f2) }

var fileDescriptor_8586caab84abc4f2 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xbd, 0x4e, 0xc3, 0x30,
	0x18, 0xc4, 0x80, 0x92, 0xf6, 0x4b, 0xd5, 0x20, 0x4f, 0x96, 0x90, 0x22, 0xc8, 0xc0, 0xcf, 0xd2,
	0xa1, 0xbc, 0x01, 0x8c, 0x88, 0x0e, 0x41, 0x62, 0x05, 0xd7, 0xfd, 0x24, 0xac, 0x24, 0x76, 0xe5,
	0xb8, 0x0c, 0x3c, 0x06, 0x13, 0x8f, 0xc4, 0xc8, 0x23, 0xa0, 0xf0, 0x22, 0x28, 0xfe, 0x91, 0x88,
	0x3a, 0xde, 0xdd, 0xa7, 0xbb, 0xf3, 0x19, 0xf2, 0x46, 0xae, 0x15, 0x5a, 0xab, 0xb7, 0x8b, 0xad,
	0xd1, 0x56, 0xd3, 0xc4, 0xa3, 0xf2, 0x05, 0x92, 0x7b, 0x34, 0x0a, 0x1b, 0xca, 0x20, 0x35, 0xd8,
	0x20, 0xef, 0x90, 0x91, 0x33, 0x72, 0x35, 0xad, 0x22, 0x1c, 0x94, 0x37, 0x34, 0x9d, 0xd4, 0x8a,
	0x1d, 0x7a, 0x25, 0x40, 0x5a, 0xc2, 0x8c, 0x1b, 0xf1, 0x2a, 0x2d, 0x0a, 0xbb, 0x33, 0xc8, 0x8e,
	0x9c, 0x3c, 0xe2, 0xca, 0x0f, 0x02, 0xe9, 0x9d, 0x91, 0x0f, 0x68, 0xf9, 0x7f, 0x27, 0x32, 0x76,
	0x3a, 0x87, 0x99, 0xd9, 0x29, 0x2b, 0x5b, 0x7c, 0x56, 0xbc, 0xc5, 0x10, 0x94, 0x05, 0x6e, 0xc5,
	0x5b, 0xa4, 0x97, 0x90, 0xc7, 0x93, 0x68, 0xe2, 0xf3, 0xe6, 0x81, 0x7e, 0xda, 0xf7, 0xea, 0xb4,
	0xa8, 0xd9, 0xf1, 0xc8, 0xeb, 0x51, 0x8b, 0xba, 0x7c, 0x87, 0xc9, 0x4a, 0x6f, 0xd0, 0x95, 0x3a,
	0x85, 0xa9, 0xd2, 0x9b, 0x90, 0xeb, 0x6b, 0x4d, 0x06, 0xc2, 0x85, 0x5e, 0x40, 0x52, 0xbb, 0x7d,
	0x5c, 0xa3, 0x6c, 0x39, 0x5f, 0x84, 0x19, 0xfd, 0x6a, 0x55, 0x50, 0xe9, 0x35, 0xa4, 0xc2, 0xc8,
	0x16, 0x2d, 0x77, 0xa5, 0xb2, 0x65, 0x1e, 0x0f, 0xc3, 0xdb, 0xab, 0xa8, 0xdf, 0x9e, 0x7c, 0xf5,
	0x05, 0xf9, 0xee, 0x0b, 0xf2, 0xd3, 0x17, 0xe4, 0xf3, 0xb7, 0x38, 0x58, 0x27, 0xee, 0x4f, 0x6e,
	0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xee, 0xe9, 0xff, 0xe8, 0xa6, 0x01, 0x00, 0x00,
}

func (m *Kernel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kernel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Kernel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Architecture) > 0 {
		i -= len(m.Architecture)
		copy(dAtA[i:], m.Architecture)
		i = encodeVarintLibnettop(dAtA, i, uint64(len(m.Architecture)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintLibnettop(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Release) > 0 {
		i -= len(m.Release)
		copy(dAtA[i:], m.Release)
		i = encodeVarintLibnettop(dAtA, i, uint64(len(m.Release)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CriMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CriMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CriMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RuntimeSock) > 0 {
		i -= len(m.RuntimeSock)
		copy(dAtA[i:], m.RuntimeSock)
		i = encodeVarintLibnettop(dAtA, i, uint64(len(m.RuntimeSock)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RuntimeVersion) > 0 {
		i -= len(m.RuntimeVersion)
		copy(dAtA[i:], m.RuntimeVersion)
		i = encodeVarintLibnettop(dAtA, i, uint64(len(m.RuntimeVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RuntimeName) > 0 {
		i -= len(m.RuntimeName)
		copy(dAtA[i:], m.RuntimeName)
		i = encodeVarintLibnettop(dAtA, i, uint64(len(m.RuntimeName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintLibnettop(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Crimeta != nil {
		{
			size, err := m.Crimeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibnettop(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Kernel != nil {
		{
			size, err := m.Kernel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibnettop(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintLibnettop(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLibnettop(dAtA []byte, offset int, v uint64) int {
	offset -= sovLibnettop(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Kernel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Release)
	if l > 0 {
		n += 1 + l + sovLibnettop(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovLibnettop(uint64(l))
	}
	l = len(m.Architecture)
	if l > 0 {
		n += 1 + l + sovLibnettop(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CriMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovLibnettop(uint64(l))
	}
	l = len(m.RuntimeName)
	if l > 0 {
		n += 1 + l + sovLibnettop(uint64(l))
	}
	l = len(m.RuntimeVersion)
	if l > 0 {
		n += 1 + l + sovLibnettop(uint64(l))
	}
	l = len(m.RuntimeSock)
	if l > 0 {
		n += 1 + l + sovLibnettop(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovLibnettop(uint64(l))
	}
	if m.Kernel != nil {
		l = m.Kernel.Size()
		n += 1 + l + sovLibnettop(uint64(l))
	}
	if m.Crimeta != nil {
		l = m.Crimeta.Size()
		n += 1 + l + sovLibnettop(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLibnettop(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLibnettop(x uint64) (n int) {
	return sovLibnettop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Kernel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibnettop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Kernel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Kernel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Release", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibnettop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibnettop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibnettop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Release = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibnettop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibnettop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibnettop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Architecture", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibnettop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibnettop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibnettop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Architecture = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibnettop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibnettop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CriMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibnettop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CriMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CriMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibnettop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibnettop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibnettop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibnettop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibnettop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibnettop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibnettop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibnettop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibnettop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeSock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibnettop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibnettop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibnettop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeSock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibnettop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibnettop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibnettop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibnettop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibnettop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibnettop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kernel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibnettop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibnettop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibnettop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kernel == nil {
				m.Kernel = &Kernel{}
			}
			if err := m.Kernel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crimeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibnettop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibnettop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibnettop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Crimeta == nil {
				m.Crimeta = &CriMeta{}
			}
			if err := m.Crimeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibnettop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibnettop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLibnettop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLibnettop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLibnettop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLibnettop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLibnettop
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLibnettop
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLibnettop
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLibnettop        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLibnettop          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLibnettop = fmt.Errorf("proto: unexpected end of group")
)
